// <auto-generated />
using System;
using Learning.Infrasture.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Learning.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241110103759_FirstNameLastNameChangedToFullname")]
    partial class FirstNameLastNameChangedToFullname
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Learning.Domain.Content.Video", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MpdFileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("RelativeUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("Learning.Domain.Core.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("Learning.Domain.Core.ClassDivision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<int?>("CourseId")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Learning.Domain.Core.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Learning.Domain.Core.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ChapterId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPreviewable")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int?>("VideoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("VideoId")
                        .IsUnique();

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Learning.Domain.Core.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int?>("SubjectGroupLookupId")
                        .HasColumnType("integer");

                    b.Property<string>("ThumbnailRelativePath")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("SubjectGroupLookupId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Learning.Domain.Identity.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("AppRoles");
                });

            modelBuilder.Entity("Learning.Domain.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("AccountCreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Index"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.HasIndex("IsAdmin");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Learning.Domain.Identity.ApplicationUserOtherDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int?>("YearOfBirth")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ApplicationUserOtherDetails");
                });

            modelBuilder.Entity("Learning.Domain.Identity.ContactUsRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("ContactUsRequests");
                });

            modelBuilder.Entity("Learning.Domain.Master.AppMasterSetting", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsJsonValue")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.ToTable("AppSettings");

                    b.HasData(
                        new
                        {
                            Id = "COG_USER_MIN_DATE",
                            IsJsonValue = true
                        },
                        new
                        {
                            Id = "COG_USER_LIST_PAGINATION",
                            IsJsonValue = true
                        });
                });

            modelBuilder.Entity("Learning.Domain.Master.Attachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RelativePath")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Learning.Domain.Master.LookupMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayValue")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("InternalName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("LookupMasters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayValue = "Subject Group Names",
                            InternalName = "SubjectGroup",
                            IsActive = true
                        },
                        new
                        {
                            Id = 2,
                            DisplayValue = "Chapter Group Names",
                            InternalName = "ChapterGroup",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Learning.Domain.Master.LookupValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("InternalName")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LookupMasterId")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LookupMasterId");

                    b.ToTable("LookupValues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayValue = "Languages",
                            InternalName = "language",
                            IsActive = true,
                            LookupMasterId = 1,
                            Order = 1
                        });
                });

            modelBuilder.Entity("Learning.Domain.Notification.ExamNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("DisplayInHomePage")
                        .HasColumnType("boolean");

                    b.Property<string>("GovtLink")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageRelativePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImportantPoints")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NotificationTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long?>("PdfFileId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly?>("ValidTill")
                        .HasColumnType("date");

                    b.Property<long?>("VideoId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PdfFileId")
                        .IsUnique();

                    b.HasIndex("VideoId")
                        .IsUnique();

                    b.ToTable("ExamNotifications");
                });

            modelBuilder.Entity("Learning.Domain.Notification.ModelExamAnswerConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long?>("AnswerImageId")
                        .HasColumnType("bigint");

                    b.Property<string>("AnswerText")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("AnswerType")
                        .HasColumnType("integer");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCorrectAnswer")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnswerImageId")
                        .IsUnique();

                    b.HasIndex("QuestionId");

                    b.ToTable("ModelExamAnswerConfigurations");
                });

            modelBuilder.Entity("Learning.Domain.Notification.ModelExamConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ExamName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("ExamNotificationId")
                        .HasColumnType("integer");

                    b.Property<long?>("ExamSolutionVideoId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFree")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ModelExamPackageId")
                        .HasColumnType("integer");

                    b.Property<int>("TotalTimeLimit")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExamNotificationId");

                    b.HasIndex("ExamSolutionVideoId")
                        .IsUnique();

                    b.HasIndex("ModelExamPackageId");

                    b.ToTable("ModelExamConfigurations");
                });

            modelBuilder.Entity("Learning.Domain.Notification.ModelExamPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("DiscountedPrice")
                        .HasColumnType("real");

                    b.Property<int>("ExamNotificationId")
                        .HasColumnType("integer");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ExamNotificationId")
                        .IsUnique();

                    b.ToTable("ModelExamPackages");
                });

            modelBuilder.Entity("Learning.Domain.Notification.ModelExamPurchaseHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<int>("ModelExamPackageId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PurchasedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.HasKey("Id");

                    b.HasIndex("ModelExamPackageId");

                    b.ToTable("ModelExamPurchaseHistory");
                });

            modelBuilder.Entity("Learning.Domain.Notification.ModelExamQuestionConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExamConfigId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<long?>("QuestionImageId")
                        .HasColumnType("bigint");

                    b.Property<string>("QuestionText")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExamConfigId");

                    b.HasIndex("QuestionImageId")
                        .IsUnique();

                    b.ToTable("ModelExamQuestionConfigurations");
                });

            modelBuilder.Entity("Learning.Domain.Notification.ModelExamResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CompletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ExamConfigId")
                        .HasColumnType("integer");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.HasKey("Id");

                    b.HasIndex("ExamConfigId");

                    b.ToTable("ModelExamResults");
                });

            modelBuilder.Entity("Learning.Domain.Notification.ModelExamResultDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ModelExamResultId")
                        .HasColumnType("bigint");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int?>("SelectedAnswerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ModelExamResultId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SelectedAnswerId");

                    b.ToTable("ModelExamResultDetails");
                });

            modelBuilder.Entity("Learning.Domain.Quiz.QuizConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DiscountPercentage")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("PassPercentage")
                        .HasColumnType("real");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("QuizConfigurations");
                });

            modelBuilder.Entity("Learning.Domain.Quiz.QuizQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Mark")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("QuestionImageRelativePath")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("QuizConfigurationId")
                        .HasColumnType("integer");

                    b.Property<int>("TimeLimitInSeconds")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuizConfigurationId");

                    b.ToTable("QuizQuestions");
                });

            modelBuilder.Entity("Learning.Domain.Quiz.QuizQuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long?>("AnswerImageId")
                        .HasColumnType("bigint");

                    b.Property<string>("AnswerText")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("AnswerType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCorrectAnswer")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("QuizQuestionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnswerImageId")
                        .IsUnique();

                    b.HasIndex("QuizQuestionId");

                    b.ToTable("QuizQuestionAnswers");
                });

            modelBuilder.Entity("Learning.Domain.Subscription.Offer.CouponCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTimeOffset>("CouponCreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CouponUsedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("DiscountPercentage")
                        .HasColumnType("real");

                    b.Property<DateTimeOffset?>("ExpiresOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("CouponCodes");
                });

            modelBuilder.Entity("Learning.Domain.Subscription.SubjectSubscriptionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("DiscountedPrice")
                        .HasColumnType("real");

                    b.Property<DateTimeOffset?>("ExpiryAbsoluteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly?>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<int>("ExpiryType")
                        .HasColumnType("integer");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.Property<DateTimeOffset?>("LastUpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short?>("NumOfDays")
                        .HasColumnType("smallint");

                    b.Property<float>("OriginalPrice")
                        .HasColumnType("real");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId")
                        .IsUnique();

                    b.ToTable("SubjectSubscriptionDetails");
                });

            modelBuilder.Entity("Learning.Domain.Subscription.UserSubscription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ExpiresOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSubscriptions");
                });

            modelBuilder.Entity("Learning.Domain.Core.Chapter", b =>
                {
                    b.HasOne("Learning.Domain.Core.Subject", "Subject")
                        .WithMany("Chapters")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Learning.Domain.Core.ClassDivision", b =>
                {
                    b.HasOne("Learning.Domain.Core.Course", "Course")
                        .WithMany("Classes")
                        .HasForeignKey("CourseId");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Learning.Domain.Core.Lesson", b =>
                {
                    b.HasOne("Learning.Domain.Core.Chapter", "Chapter")
                        .WithMany("Lessons")
                        .HasForeignKey("ChapterId");

                    b.HasOne("Learning.Domain.Content.Video", "Video")
                        .WithOne()
                        .HasForeignKey("Learning.Domain.Core.Lesson", "VideoId");

                    b.Navigation("Chapter");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("Learning.Domain.Core.Subject", b =>
                {
                    b.HasOne("Learning.Domain.Core.ClassDivision", "Class")
                        .WithMany("Subjects")
                        .HasForeignKey("ClassId");

                    b.HasOne("Learning.Domain.Master.LookupValue", "SubjectGroupLookup")
                        .WithMany()
                        .HasForeignKey("SubjectGroupLookupId");

                    b.Navigation("Class");

                    b.Navigation("SubjectGroupLookup");
                });

            modelBuilder.Entity("Learning.Domain.Identity.ApplicationUser", b =>
                {
                    b.HasOne("Learning.Domain.Identity.AppRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Learning.Domain.Identity.ApplicationUserOtherDetail", b =>
                {
                    b.HasOne("Learning.Domain.Identity.ApplicationUser", null)
                        .WithOne("OtherDetails")
                        .HasForeignKey("Learning.Domain.Identity.ApplicationUserOtherDetail", "UserId");
                });

            modelBuilder.Entity("Learning.Domain.Master.LookupValue", b =>
                {
                    b.HasOne("Learning.Domain.Master.LookupMaster", "LookupMaster")
                        .WithMany("LookupValues")
                        .HasForeignKey("LookupMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LookupMaster");
                });

            modelBuilder.Entity("Learning.Domain.Notification.ExamNotification", b =>
                {
                    b.HasOne("Learning.Domain.Master.Attachment", "PdfFile")
                        .WithOne()
                        .HasForeignKey("Learning.Domain.Notification.ExamNotification", "PdfFileId");

                    b.HasOne("Learning.Domain.Master.Attachment", "Video")
                        .WithOne()
                        .HasForeignKey("Learning.Domain.Notification.ExamNotification", "VideoId");

                    b.Navigation("PdfFile");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("Learning.Domain.Notification.ModelExamAnswerConfiguration", b =>
                {
                    b.HasOne("Learning.Domain.Master.Attachment", "AnswerImage")
                        .WithOne()
                        .HasForeignKey("Learning.Domain.Notification.ModelExamAnswerConfiguration", "AnswerImageId");

                    b.HasOne("Learning.Domain.Notification.ModelExamQuestionConfiguration", "Question")
                        .WithMany("ModelExamAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnswerImage");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Learning.Domain.Notification.ModelExamConfiguration", b =>
                {
                    b.HasOne("Learning.Domain.Notification.ExamNotification", "ExamNotification")
                        .WithMany()
                        .HasForeignKey("ExamNotificationId");

                    b.HasOne("Learning.Domain.Master.Attachment", "ExamSolutionVideo")
                        .WithOne()
                        .HasForeignKey("Learning.Domain.Notification.ModelExamConfiguration", "ExamSolutionVideoId");

                    b.HasOne("Learning.Domain.Notification.ModelExamPackage", "ModelExamPackage")
                        .WithMany("ModelExamConfigs")
                        .HasForeignKey("ModelExamPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamNotification");

                    b.Navigation("ExamSolutionVideo");

                    b.Navigation("ModelExamPackage");
                });

            modelBuilder.Entity("Learning.Domain.Notification.ModelExamPackage", b =>
                {
                    b.HasOne("Learning.Domain.Notification.ExamNotification", "ExamNotification")
                        .WithOne()
                        .HasForeignKey("Learning.Domain.Notification.ModelExamPackage", "ExamNotificationId");

                    b.Navigation("ExamNotification");
                });

            modelBuilder.Entity("Learning.Domain.Notification.ModelExamPurchaseHistory", b =>
                {
                    b.HasOne("Learning.Domain.Notification.ModelExamPackage", "ModelExamPackage")
                        .WithMany("PurchaseHitories")
                        .HasForeignKey("ModelExamPackageId");

                    b.Navigation("ModelExamPackage");
                });

            modelBuilder.Entity("Learning.Domain.Notification.ModelExamQuestionConfiguration", b =>
                {
                    b.HasOne("Learning.Domain.Notification.ModelExamConfiguration", "ExamConfig")
                        .WithMany("Questions")
                        .HasForeignKey("ExamConfigId");

                    b.HasOne("Learning.Domain.Master.Attachment", "QuestionImage")
                        .WithOne()
                        .HasForeignKey("Learning.Domain.Notification.ModelExamQuestionConfiguration", "QuestionImageId");

                    b.Navigation("ExamConfig");

                    b.Navigation("QuestionImage");
                });

            modelBuilder.Entity("Learning.Domain.Notification.ModelExamResult", b =>
                {
                    b.HasOne("Learning.Domain.Notification.ModelExamConfiguration", "ExamConfig")
                        .WithMany()
                        .HasForeignKey("ExamConfigId");

                    b.Navigation("ExamConfig");
                });

            modelBuilder.Entity("Learning.Domain.Notification.ModelExamResultDetail", b =>
                {
                    b.HasOne("Learning.Domain.Notification.ModelExamResult", null)
                        .WithMany("ModelExamResultDetails")
                        .HasForeignKey("ModelExamResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Learning.Domain.Notification.ModelExamQuestionConfiguration", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Learning.Domain.Notification.ModelExamAnswerConfiguration", "SelectedAnswer")
                        .WithMany()
                        .HasForeignKey("SelectedAnswerId");

                    b.Navigation("Question");

                    b.Navigation("SelectedAnswer");
                });

            modelBuilder.Entity("Learning.Domain.Quiz.QuizQuestion", b =>
                {
                    b.HasOne("Learning.Domain.Quiz.QuizConfiguration", "QuizConfiguration")
                        .WithMany("Questions")
                        .HasForeignKey("QuizConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuizConfiguration");
                });

            modelBuilder.Entity("Learning.Domain.Quiz.QuizQuestionAnswer", b =>
                {
                    b.HasOne("Learning.Domain.Master.Attachment", "AnswerImage")
                        .WithOne()
                        .HasForeignKey("Learning.Domain.Quiz.QuizQuestionAnswer", "AnswerImageId");

                    b.HasOne("Learning.Domain.Quiz.QuizQuestion", "QuizQuestion")
                        .WithMany("Answers")
                        .HasForeignKey("QuizQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnswerImage");

                    b.Navigation("QuizQuestion");
                });

            modelBuilder.Entity("Learning.Domain.Subscription.SubjectSubscriptionDetail", b =>
                {
                    b.HasOne("Learning.Domain.Core.Subject", "Subject")
                        .WithOne("SubscriptionDetail")
                        .HasForeignKey("Learning.Domain.Subscription.SubjectSubscriptionDetail", "SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Learning.Domain.Subscription.UserSubscription", b =>
                {
                    b.HasOne("Learning.Domain.Core.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Learning.Domain.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Learning.Domain.Core.Chapter", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("Learning.Domain.Core.ClassDivision", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Learning.Domain.Core.Course", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("Learning.Domain.Core.Subject", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("SubscriptionDetail")
                        .IsRequired();
                });

            modelBuilder.Entity("Learning.Domain.Identity.ApplicationUser", b =>
                {
                    b.Navigation("OtherDetails")
                        .IsRequired();
                });

            modelBuilder.Entity("Learning.Domain.Master.LookupMaster", b =>
                {
                    b.Navigation("LookupValues");
                });

            modelBuilder.Entity("Learning.Domain.Notification.ModelExamConfiguration", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Learning.Domain.Notification.ModelExamPackage", b =>
                {
                    b.Navigation("ModelExamConfigs");

                    b.Navigation("PurchaseHitories");
                });

            modelBuilder.Entity("Learning.Domain.Notification.ModelExamQuestionConfiguration", b =>
                {
                    b.Navigation("ModelExamAnswers");
                });

            modelBuilder.Entity("Learning.Domain.Notification.ModelExamResult", b =>
                {
                    b.Navigation("ModelExamResultDetails");
                });

            modelBuilder.Entity("Learning.Domain.Quiz.QuizConfiguration", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Learning.Domain.Quiz.QuizQuestion", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
