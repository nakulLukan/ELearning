@inject IJSRuntime JSRuntime;
<style>
    video {
        height:100%;
        width: auto;
    }

    .controller-bar{
        position: absolute;
        bottom:0;
        width:100%;
        background: #0000004d;
    }
    
</style>
<div class="dash-video-player h-100">
    <div id="videoContainer" class="videoContainer h-100 relative">
        <video id="@_dashPlayerId" @onclick="TogglePlay"></video>
        <div class="controller-bar">

            <div id="videoController" class="video-controller bg-transparent  unselectable" ng-cloak="">
                <div id="playPauseBtn" class="btn-play-pause" data-toggle="tooltip" data-placement="bottom" title="Play/Pause">
                    <span id="iconPlayPause" class="icon-play"></span>
                </div>
                <span id="videoTime" class="time-display">00:00:00</span>
                <div id="fullscreenBtn" class="btn-fullscreen control-icon-layout" data-toggle="tooltip" data-placement="bottom" title="Fullscreen">
                    <span class="icon-fullscreen-enter"></span>
                </div>
                <div id="bitrateListBtn" class="btn-bitrate control-icon-layout" data-toggle="tooltip" data-placement="bottom" title="Bitrate List">
                    <span class="icon-bitrate"></span>
                </div>
                <input type="range" id="volumebar" class="volumebar" value="1" min="0" max="1" step=".01">
                <div id="muteBtn" class="btn-mute control-icon-layout" data-toggle="tooltip" data-placement="bottom" title="Mute">
                    <span id="iconMute" class="icon-mute-off"></span>
                </div>
                <div id="trackSwitchBtn" class="btn-track-switch control-icon-layout" data-toggle="tooltip" data-placement="bottom" title="Track List">
                    <span class="icon-tracks"></span>
                </div>
                <div id="captionBtn" class="btn-caption control-icon-layout" data-toggle="tooltip" data-placement="bottom" title="Closed Caption / Subtitles">
                    <span class="icon-caption"></span>
                </div>
                <span id="videoDuration" class="duration-display">00:00:00</span>
                <div class="seekContainer">
                    <div id="seekbar" class="seekbar seekbar-complete">
                        <div id="seekbar-buffer" class="seekbar seekbar-buffer"></div>
                        <div id="seekbar-play" class="seekbar seekbar-play"></div>
                    </div>
                </div>
                <div id="thumbnail-container" class="thumbnail-container">
                    <!-- Thumbnails will be rendered here -->
                    <div id="thumbnail-elem" class="thumbnail-elem"></div>
                    <div id="thumbnail-time-label" class="thumbnail-time-label"></div>
                </div>
            </div>
        </div>
    </div>
</div>
@code {

    [Parameter]
    [EditorRequired]
    public string VideoUrl { get; set; }

    [Parameter]
    public string Hash { get; set; }

    [Parameter]
    public bool AutoLoad { get; set; }

    [Parameter]
    public DashPlayerOptions Options { get; set; }

    [Parameter] public EventCallback OnPlaybackEnded { get; set; }

    private const string _dashPlayerId = "dash-player";
    private IJSObjectReference _jsModule;
    private IJSObjectReference _jsDashPlayer;
    private DotNetObjectReference<DashPlayer> _dotnetObjectRef;
    private bool _togglePlay = true;

    protected override Task OnInitializedAsync()
    {
        _dotnetObjectRef = DotNetObjectReference.Create(this);
        return base.OnInitializedAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        _jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/dash.blazor.js");
        await InitialisePlayer();
    }

    private async Task InitialisePlayer()
    {
        if (_jsModule != null && _jsDashPlayer is null)
        {
            _jsDashPlayer = await _jsModule.InvokeAsync<IJSObjectReference>("initializeDashPlayer", "dash-player", VideoUrl, Hash, AutoLoad, Options, _dotnetObjectRef);
        }
    }

    public async Task ChangeVideoUrl(string newUrl)
    {
        await InitialisePlayer();
        VideoUrl = newUrl;
        await _jsModule.InvokeVoidAsync("changeSource", _jsDashPlayer, newUrl);
    }

    private async Task TogglePlay()
    {
        await InitialisePlayer();
        _togglePlay = !_togglePlay;

        string funcName = _togglePlay ? "play" : "pause";
        await _jsModule.InvokeVoidAsync(funcName, _jsDashPlayer);
    }

    [JSInvokable]
    public async Task OnPlaybackEndedHandler()
    {
        await InvokeAsync(OnPlaybackEnded.InvokeAsync);
    }

    public void Dispose() => _dotnetObjectRef?.Dispose();
}


@code {
    public class DashPlayerOptions
    {
        public bool ScheduleWhilePaused { get; set; }
        public bool FastSwitchEnabled { get; set; } = true;
    }
}