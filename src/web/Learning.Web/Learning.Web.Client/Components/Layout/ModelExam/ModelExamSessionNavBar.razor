@using Learning.Web.Client.Components.Views.Auth
<div>
	<MudAppBar WrapContent Gutters="false" Class="mr-2">
		<div class="w-100 h-100 d-none d-md-flex justify-space-between align-center">
			<MudButton Href="/" Class="no-link h-100 pa-0 pr-4 ">
				<img src="assets/images/bts_icon.svg" alt="Logo" class="logo" /> <MudText Class="app-nav-banner-text"><b>@UIConstant.AppName</b></MudText>
			</MudButton>

			<div class="d-flex mr-6">
				<Learning.Web.Client.Components.Controls.Actions.AppButton Text="End Exam" Size="Controls.Actions.AppButton.ButtonSize.Small"
																		   OnClick="OnEndExam" />
			</div>
		</div>
		<div class="d-flex d-md-none flex-no-wrap justify-space-between w-100">
			<MudButton Href="/" Class="no-link">
				<img src="assets/images/bts_icon.svg" alt="Logo" class="logo" /> <MudText Typo="Typo.subtitle1" Class="app-nav-banner-text"><b>@UIConstant.AppName</b></MudText>
			</MudButton>
			<div class="d-flex flex-column justify-center mr-2">
				<Learning.Web.Client.Components.Controls.Actions.AppButton Text="End Exam" Size="Controls.Actions.AppButton.ButtonSize.Small"
																		   OnClick="OnEndExam" />
			</div>
		</div>
	</MudAppBar>
</div>
@code {

	[Parameter]
	public EventCallback<bool> EndExamChanged { get; set; }

	void OnEndExam()
	{
		if (EndExamChanged.HasDelegate)
		{
			EndExamChanged.InvokeAsync();
		}
	}
}