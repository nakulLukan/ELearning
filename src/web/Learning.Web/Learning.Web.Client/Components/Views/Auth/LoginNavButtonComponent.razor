@using Learning.Shared.Contracts.HttpContext
@using Learning.Web.Client.Components.Controls.Actions
@inject IRequestContext RequestContext
@inject HttpClient logoutHttpClient
<span>
	@if (_isLoggedIn)
	{
		<MudMenu EndIcon="@Icons.Material.Filled.KeyboardArrowDown"
				 Label="@($"Hi, {_loggedInName}")"
				 FullWidth
				 AnchorOrigin="Origin.BottomLeft"
				 Ripple="false" Class="d-none d-md-inline-flex" PopoverClass="mt-2 rounded">
			<MudMenuItem Icon="@Icons.Material.Filled.AddShoppingCart" OnClick="OnPurchaseHistory">
				Purchase History
			</MudMenuItem>
			<MudDivider />
			<MudMenuItem Icon="@Icons.Material.Filled.Logout" OnClick="OnLogout">
				Logout
			</MudMenuItem>
		</MudMenu>
		<MudMenu Class="app-nav-menu d-md-none" AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.TopRight" Size="Size.Small" Dense>
			<ActivatorContent>
				<MudButton Variant="Variant.Filled" Color="Color.Primary">@($"Hi, {_loggedInName}")</MudButton>
			</ActivatorContent>
			<ChildContent>
				<MudMenuItem Class="app-nav-menu"
							 IconSize="Size.Small"
							 Icon="@Icons.Material.Filled.AddShoppingCart"
							 Style="text-transform:none;"
							 OnClick="OnPurchaseHistory">
					Purchase History
				</MudMenuItem>
				<MudDivider />
				<MudMenuItem Class="app-nav-menu"
							 IconSize="Size.Small"
							 IconColor="Color.Error"
							 Icon="@Icons.Material.Filled.Logout"
							 Style="text-transform:none;"
							 OnClick="OnLogout">
					Logout
				</MudMenuItem>
			</ChildContent>
		</MudMenu>
	}
	else
	{
		<AppButton ButtonType="AppButton.AppButtonType.Secondary"
				   OnClick="Login"
				   Text="Login"
				   TextTransform="AppButton.ButtonTextTransform.None"
				   Class="d-none d-md-inline-flex"></AppButton>
		<MudNavLink Class="app-nav-menu d-md-none" OnClick="Login">Login</MudNavLink>

	}
</span>
@code {

	private string? _loggedInName;
	private bool _isLoggedIn = false;

	protected override async Task OnInitializedAsync()
	{
		_isLoggedIn = await RequestContext.IsAuthenticated();
		if (_isLoggedIn)
		{
			_loggedInName = await RequestContext.GetName();
			StateHasChanged();
		}
	}

	private void OnLogout()
	{
		try
		{
			NavigationManager.NavigateTo("Account/SignOut", true);
		}
		catch (Exception ex)
		{
			Console.WriteLine($"{ex.Message} {ex.StackTrace}");
		}
	}

	private void OnPurchaseHistory()
	{
		NavigationManager.NavigateTo("purchase-history/model-exams");
	}

	private void Login()
	{
		NavigationManager.NavigateToLogin();
	}
}
