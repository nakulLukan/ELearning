@using Learning.Shared.Contracts.HttpContext
@using Learning.Web.Client.Components.Controls.Actions
@inject IRequestContext RequestContext
@inject HttpClient logoutHttpClient
<span>
	@if (_isLoggedIn)
	{
		<MudMenu EndIcon="@Icons.Material.Filled.KeyboardArrowDown"
				 Label="@($"Hi, {_loggedInName}")"
				 FullWidth
				 AnchorOrigin="Origin.BottomLeft"
				 Ripple="false" Class="d-none d-md-inline-flex">
			<MudMenuItem>
				<MudButton ButtonType="ButtonType.Submit"
						   Class="mud-nav-link"
						   StartIcon="@Icons.Material.Filled.Logout"
						   Style="text-transform:none;"
						   Size="Size.Small"
						   OnClick="OnLogout">
					Logout
				</MudButton>
			</MudMenuItem>
		</MudMenu>
		<MudNavGroup Title="@($"Hi, {_loggedInName}")" Expanded="false" Class="app-nav-menu d-md-none">
			<MudNavLink Class="app-nav-menu"
						Icon="@Icons.Material.Filled.Logout"
						Style="text-transform:none;"
						OnClick="OnLogout">
				Logout
			</MudNavLink>
		</MudNavGroup>
	}
	else
	{
		<AppButton ButtonType="AppButton.AppButtonType.Secondary"
				   OnClick="Login"
				   Text="Login"
				   TextTransform="AppButton.ButtonTextTransform.None"
				   Class="d-none d-md-inline-flex"></AppButton>
		<MudNavLink Class="app-nav-menu d-md-none" OnClick="Login">Login</MudNavLink>

	}
</span>
@code {

	private string? _loggedInName;
	private bool _isLoggedIn = false;

	protected override async Task OnInitializedAsync()
	{
		_isLoggedIn = await RequestContext.IsAuthenticated();
		if (_isLoggedIn)
		{
			_loggedInName = await RequestContext.GetName();
			StateHasChanged();
		}
	}

	private async Task OnLogout()
	{
		try
		{
			NavigationManager.NavigateTo("Account/SignOut", true);
		}
		catch (Exception ex)
		{
			Console.WriteLine($"{ex.Message} {ex.StackTrace}");
		}
	}

	private void Login()
	{
		NavigationManager.NavigateToLogin();
	}
}
