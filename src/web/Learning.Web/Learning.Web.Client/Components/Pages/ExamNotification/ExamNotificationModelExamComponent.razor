@using Learning.Shared.Contracts.HttpContext
@using Learning.Web.Client.Components.Controls.Actions
@using Learning.Web.Client.Contracts.Interop
@using Learning.Web.Client.Contracts.Presentation
@using Learning.Web.Client.Contracts.Services.ExamNotification
@using Learning.Web.Client.Dto.ExamNotifications.ModelExam
@using Learning.Web.Client.Impl.Interop
@inject IModelExamDataService ModelExamDataService
@inject IAlertService AlertService
@inject IRequestContext RequestContext
@inject IAppJSInterop AppJSInterop

<div class="d-flex flex-column gap-6 mt-20">

	@if (_modelExams != null)
	{
		if (_modelExams.Any())
		{
			<h4>Model Exams</h4>
			@if (_isLocked)
			{
				<Learning.Web.Client.Components.Pages.ModelExam.ModelExamPurchaseNowComponent ExamNotificationId="ExamNotificationId" DiscountedPrice="_discountedPrice" />
			}
			<div class="d-flex flex-column flex-md-row gap-8 gap-md-11 flex-wrap">
				@foreach (var modelExam in _modelExams)
				{
					<Learning.Web.Client.Components.Pages.ModelExam.ModelExamDetailComponent Model="modelExam" />
				}
			</div>
		}
	}

</div>
@code {
	[Parameter, EditorRequired]
	public int ExamNotificationId { get; set; }

	ModelExamMetaDataDto[]? _modelExams;
	private bool _isLocked = false;
	private float _discountedPrice = 0;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (!firstRender) return;
		if (ExamNotificationId != 0)
		{
			var modelExams = await ModelExamDataService.GetAllModelExamMetaData(ExamNotificationId);
			if (modelExams.IsSuccess)
			{
				_modelExams = modelExams.Value.Select(x => new ModelExamMetaDataDto
					{
						ModelExamId = x.ExamConfigId,
						DiscountedPrice = x.DiscountedPrice,
						Price = x.Price,
						ExamName = x.ExamName,
						ExamNotificationId = x.ExamNotificationId,
						IsFree = x.IsFree,
						IsLocked = x.IsLocked,
						ExamDescription = x.ExamDescription,
						TotalQuestions = x.TotalQuestions,
						TotalTimeInSeconds = x.TotalTimeInSeconds,
						NegativeMark = x.NegativeMark,
						PositiveMark = x.PositiveMark,
						TotalMarks = x.TotalMarks
					}).ToArray();
				_isLocked = _modelExams.Any(x => x.IsLocked);
				if (_isLocked)
				{
					_discountedPrice = _modelExams.First(x => x.IsLocked).DiscountedPrice;
				}
				StateHasChanged();
				// If the user has chosen to start a free exam then navigate to the free exam component
				if (NavigationManager.GetTargetFragmentInRoute() is string route)
				{
					await AppJSInterop.ScrollToTarget("free-exam");
				}
			}
		}
	}
}
