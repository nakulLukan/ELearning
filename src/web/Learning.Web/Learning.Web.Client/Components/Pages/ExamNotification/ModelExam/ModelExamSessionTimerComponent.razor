@implements IDisposable
<div class="d-flex flex-row align-content-center">
	<MudIcon Class="align-self-center" Icon="@Icons.Material.Outlined.AccessTime">
	</MudIcon>
	<span class="app-timer ml-2">@(_timeLeftString!)</span>
</div>

@code {

	#region TimerInSeconds
	[Parameter]
	[EditorRequired]
	public int TimerInSeconds { get; set; }

	#endregion

	[Parameter]
	public EventCallback TimeoutReached { get; set; }
	private int _timeLeftInSeconds { get; set; }
	public string? _timeLeftString { get; set; }

	private System.Timers.Timer? timer;

	private DateTimeOffset _startTime;

	protected override void OnInitialized()
	{
		base.OnInitialized();
		timer = new System.Timers.Timer(1000);
		timer.Elapsed += TimerElapsed;
		timer.Start();
		_startTime = DateTimeOffset.UtcNow;
	}


	private void TimerElapsed(object? sender, System.Timers.ElapsedEventArgs e)
	{
		if (TimerInSeconds >= _timeLeftInSeconds)
		{
			_timeLeftInSeconds = (int)(DateTimeOffset.UtcNow - _startTime).TotalSeconds;
			if (_timeLeftInSeconds >= TimerInSeconds && TimeoutReached.HasDelegate)
			{
				UpdateTimeleftString();
				InvokeAsync(TimeoutReached.InvokeAsync);
				return;
			}
			UpdateTimeleftString();
			InvokeAsync(StateHasChanged);
		}
		else
		{
			timer?.Stop();
		}
	}

	private void UpdateTimeleftString()
	{

		int timeLeftInSeconds = TimerInSeconds - _timeLeftInSeconds;
		var timeLeft = TimeOnly.FromTimeSpan(TimeSpan.FromSeconds(Math.Max(0, timeLeftInSeconds)));
		_timeLeftString = timeLeftInSeconds > 120 ? timeLeft.ToString("HH:mm") : $"{timeLeftInSeconds} seconds left";
	}

	public void Pause()
	{
		timer?.Stop();
	}

	public void TurnOff()
	{
		timer?.Stop();
		TimerInSeconds = 0;
	}

	void IDisposable.Dispose()
	{
		Console.WriteLine("Model Exam Timer component disposed");
		TurnOff();
		timer?.Dispose();
	}
}
