@page "/exam-notifications/{ExamNotificationId:int}/apply"
@using Learning.Shared.Dto.Notifications.ExamNotification
@using Learning.Shared.Extensions
@using Learning.Web.Client.Components.Controls.Actions
@using Learning.Web.Client.Components.Pages
@using Learning.Web.Client.Contracts.Services.ExamNotification
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using static Learning.Web.Client.Components.Controls.Actions.AppButton
@rendermode InteractiveAuto
@inject NavigationManager NavigationManager
@inject IExamNotificationDataService ExamNotificationDataService
<AppPage>
    <div class="pt-9">
        <MudContainer MaxWidth="MaxWidth.Large" class="en-page-container">
            @if (_detail != null)
            {
                <div class="d-flex flex-column gap-3 gap-md-6">
                    <div class="d-flex flex-column flex-md-row justify-space-between">
                        <h4>@_detail.Title</h4>
                        @if (_detail.ValidTill.HasValue)
                        {
                            <h6 class="mt-3 mt-md-0">@_detail.ValidTill.Value.ToDateString()</h6>
                        }
                    </div>

                    <div class="d-flex flex-column flex-md-row justify-space-between align-stretch gap-7 gap-md-9">
                        <MudStack>
                            <p class="mb-9">@_detail.Description</p>
                            <h4 class="mb-3 mb-md-6">Important points to be noted</h4>
                            <ol>
                                @foreach (var li in _detail.ImportantPoints!)
                                {
                                    <li>@li</li>
                                }
                            </ol>
                            <div class="d-none d-md-flex flex-row flex-grow-1 gap-5 align-end">
                                <AppButton Text="Apply now"
                                           Href="@_detail.GovtLink"
                                           Target="_blank"></AppButton>
                                @if (!string.IsNullOrEmpty(_detail.PdfFileAbsUrl))
                                {
                                    <AppButton Text="Download PDF"
                                               ButtonType="AppButtonType.Secondary"
                                               Href="@_detail.PdfFileAbsUrl"
                                               Target="_blank"></AppButton>
                                }
                            </div>
                        </MudStack>
                        <video src="@_detail.VideoAbsUrl" loop preload="metadata" controls controlsList="nodownload noremoteplayback noplaybackrate" disablePictureInPicture></video>
                        <div class="d-flex d-md-none flex-column gap-4">
                            <AppButton Text="Apply now"
                                       FullWidth
                                       Href="@_detail.GovtLink"
                                       Target="_blank"></AppButton>
                            @if (!string.IsNullOrEmpty(_detail.PdfFileAbsUrl))
                            {
                                <AppButton Text="Download PDF"
                                           FullWidth
                                           ButtonType="AppButtonType.Secondary"
                                           Href="@_detail.PdfFileAbsUrl"
                                           Target="_blank"></AppButton>
                            }
                        </div>
                    </div>
                    <ExamNotificationModelExamComponent ExamNotificationId="@ExamNotificationId" />
                </div>
            }
            else
            {
                <div class="d-flex flex-column gap-3 gap-md-6">
                    <div class="d-flex flex-column flex-md-row justify-space-between">
                        <MudSkeleton Width="150px" Height="39px"></MudSkeleton>
                        <MudSkeleton Width="100px" Height="39px"></MudSkeleton>
                    </div>

                    <div class="d-flex flex-column flex-md-row justify-space-between align-stretch gap-7 gap-md-9">
                        <MudStack>
                            <MudSkeleton Class="mb-9" Width="533px" Height="66px">

                            </MudSkeleton>
                            <MudSkeleton Class="mb-3 mb-md-6" Width="533px" Height="133px">

                            </MudSkeleton>
                            <div class="d-none d-md-flex flex-row flex-grow-1 gap-5">
                                <MudSkeleton Width="250px" Height="60px"></MudSkeleton>
                                <MudSkeleton Width="250px" Height="60px"></MudSkeleton>
                            </div>
                        </MudStack>
                        <MudSkeleton Width="400px" Height="400px"/>
                        <div class="d-flex d-md-none flex-column gap-4">
                            <MudSkeleton Width="250px" Height="60px"></MudSkeleton>
                            <MudSkeleton Width="250px" Height="60px"></MudSkeleton>
                        </div>
                    </div>
                    <div class="d-flex flex-column flex-md-row gap-md-11">
                        <MudSkeleton Width="335px" Height="256px" />
                        <MudSkeleton Width="335px" Height="256px" />
                        <MudSkeleton Width="335px" Height="256px" />
                    </div>
                </div>
            }
        </MudContainer>
    </div>
</AppPage>

@code {
    [Parameter]
    public int ExamNotificationId { get; set; }

    private ActiveExamNotificationDetailDto? _detail = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        try
        {
            var result = await ExamNotificationDataService.ActiveExamNotificationDetailById(ExamNotificationId);
            if (result.IsSuccess)
            {
                _detail = result.Value;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            NavigationManager.NavigateTo("/error");
        }
    }
}
