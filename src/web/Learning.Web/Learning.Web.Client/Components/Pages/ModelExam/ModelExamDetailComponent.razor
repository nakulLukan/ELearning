@using Learning.Shared.Contracts.HttpContext
@using Learning.Web.Client.Components.Controls.Actions
@using Learning.Web.Client.Contracts.Services.ExamNotification
@using Learning.Web.Client.Dto.ExamNotifications.ModelExam
@inject IRequestContext RequestContext
@inject IModelExamDataService ModelExamDataService
@inject IAlertService AlertService
@if (Model!.IsLocked)
{
	<div class="me-card">
		<div class="me-card-gradient">
			<div class="d-flex flex-column justify-end h-100 ">
				<div class="px-6 py-5 bg-white">
					<div class="d-flex justify-space-between">
						<h4 class="locked-title">@Model.ExamName</h4>
						<div class="locked-badge d-flex justify-space-between align-center gap-2">
							<MudIcon Icon="@Icons.Material.Rounded.Lock" />
							<span class="lock-badge-text">Locked</span>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}
else
{
	<div class="me-card">
		<div class="me-card-gradient pa-4">
			<div class="d-flex flex-column justify-space-between h-100">
				<div>
					@if (Model!.IsFree)
					{
						<span class="me-badge">
							FREE EXAM
						</span>
					}
				</div>
				<div class="d-flex flex-column gap-4">
					<h4 class="me-card-title">@Model!.ExamName</h4>
					<AppButton Text="Start Exam Now" OnClick="StartExamClicked" id="@(Model!.IsFree ? "free-exam" : string.Empty)" />
				</div>
			</div>
		</div>
	</div>
}
@code {

	[Parameter]
	public ModelExamMetaDataDto? Model { get; set; }

	private async Task StartExamClicked()
	{
		if (!await RequestContext.IsAuthenticated())
		{
			NavigationManager.NavigateToLogin();
			return;
		}

		var hasValidSubscription = await ModelExamDataService.CheckUserModelExamSubscriptionQuery(Model!.ModelExamId);
		if (hasValidSubscription.IsSuccess)
		{
			if (hasValidSubscription.Value.Data)
			{
				var started = await AlertService.DisplayStartModelExamAlert(Model!.ExamName,
					Model.ExamDescription,
					Model.TotalQuestions,
					Model.TotalTimeInSeconds,
					Model.PositiveMark,
					Model.NegativeMark,
					Model.TotalMarks);
				if (started)
				{
					NavigationManager.NavigateTo($"/model-exams/{Model!.ModelExamId}/begin");
				}
			}
			return;
		}
	}
}
