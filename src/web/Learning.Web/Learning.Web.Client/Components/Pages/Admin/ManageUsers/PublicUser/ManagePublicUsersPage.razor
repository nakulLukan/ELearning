@page "/Manage/PublicUsers"
@layout AdminLayout
@using Learning.Business.Dto.Users
@using Learning.Business.Requests.Users.PublicUser
@using MudBlazor.Utilities
@inherits AppBaseComponent

<MudDataGrid @ref=_dataGrid T="PublicUserListItemDto" Virtualize="true" Groupable="false" Bordered ShowMenuIcon="false" FixedHeader Dense
              Hover RowClass="cursor-pointer" Loading="@_isLoading" ServerData="LoadUsers" Style="height: 100%"
              Filterable=false SortMode="SortMode.None" FixedFooter Height="calc(100% -100)" Striped>
     <ToolBarContent>
         <MudText Typo="Typo.h6"><b>Public Users</b></MudText>
         <MudSpacer />
         <MudTextField @bind-Value="_searchString"
                       Placeholder="@(@"Search by ""Name"" or ""Email Address""")" Adornment="Adornment.Start" Immediate
                       AdornmentIcon="@Icons.Material.Filled.Search" Variant=Variant.Outlined Margin=Margin.Dense
                       IconSize="Size.Medium" Class="mt-0" OnKeyDown="@OnEnterPressed" Clearable
                       OnClearButtonClick="OnClear"></MudTextField>
     </ToolBarContent>
     <Columns>
         <PropertyColumn Property="x => x.Index" Title="Code" Sortable="true" />
         <PropertyColumn Property="x => x.FirstName" Title="First Name" Sortable="true" />
         <PropertyColumn Property="x => x.LastName" Title="Last Name" />
         <PropertyColumn Property="x => x.ContactNumber" Title="Contact Number" />
         <PropertyColumn Property="@(context=> context.IsContactNumberVerified ? "Verified" : "Not Verified")" Title="Contact Verified" />
         <PropertyColumn Property="x => x.EmailAddress" Title="Email Address" Sortable=true />
         <PropertyColumn Property="@(context=> context.IsEmailAddressVerified ? "Verified" : "Not Verified")" Title="Contact Verified" />
         <PropertyColumn Property="x => x.AccountCreatedOn" Title="Joined On" Sortable="true" />
         <PropertyColumn Property="@(context=> context.IsActive ? "Active" : "In-Active")" Title="Account Status" />
         <TemplateColumn Title="Action">
             <CellTemplate>
                 <MudButton Variant="Variant.Text" Size="Size.Small">Edit</MudButton>
             </CellTemplate>
         </TemplateColumn>
     </Columns>
     <LoadingContent>
         Loading...
     </LoadingContent>
     <NoRecordsContent>
         <NoRecordsComponent />
     </NoRecordsContent>
     <PagerContent>
         <MudDataGridPager T="PublicUserListItemDto" />
     </PagerContent>
 </MudDataGrid>
 @code {
    List<PublicUserListItemDto> _elements = new();
    MudDataGrid<PublicUserListItemDto> _dataGrid;
    GridState<PublicUserListItemDto> _gridState;
    private int _usersCount;

    private string _searchString = "";
    private string _lastSearchString = "";

    private async Task<GridData<PublicUserListItemDto>> LoadUsers(GridState<PublicUserListItemDto> gridState)
    {
        _gridState = gridState;
        var sortBy = gridState.SortDefinitions.FirstOrDefault();
        var response = (await Mediator.Send(new PublicUserListQuery()
            {
                Skip = gridState.PageSize * gridState.Page,
                Take = gridState.PageSize,
                SortBy = sortBy?.SortBy ?? string.Empty,
                IsDescending = sortBy?.Descending ?? false,
                EmailOrNameFilter = _searchString,
            }));
        return new GridData<PublicUserListItemDto>
            {
                TotalItems = response.TotalRecords,
                Items = response.Data
            };
    }

    private async Task OnEnterPressed(KeyboardEventArgs eventArg)
    {
        if (eventArg.Code == "Enter")
        {
            await OnSearch();
        }
    }

    private async Task OnSearch()
    {
        if (_lastSearchString == _searchString)
        {
            return;
        }

        await LoadUsers(_gridState);
        _lastSearchString = _searchString;
    }

    private async Task OnClear()
    {
        _searchString = _lastSearchString = string.Empty;
        await LoadUsers(_gridState);
    }
}
