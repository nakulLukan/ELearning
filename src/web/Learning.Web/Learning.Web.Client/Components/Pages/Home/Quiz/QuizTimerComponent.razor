@if (true)
{
    <MudText Typo="Typo.body2"><MudIcon Icon="@Icons.Material.TwoTone.Timer" Color="Color.Default" /> Time Left: <MudText Typo="Typo.body1" Class="d-inline"><b> @TimerInSeconds seconds</b></MudText> </MudText>
}

@code {

    #region TimerInSeconds
    [Parameter]
    [EditorRequired]
    public int TimerInSeconds
    {
        get => _timerInSeconds; set
        {
            if (value != _timerInSeconds)
            {
                _timerInSeconds = value;
                InvokeAsync(() => TimerInSecondsChanged.InvokeAsync(value));
            }
        }
    }
    private int _timerInSeconds;

    [Parameter]
    public EventCallback<int> TimerInSecondsChanged { get; set; }
    #endregion

    private System.Timers.Timer? timer;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        timer = new System.Timers.Timer(1000);
        timer.Elapsed += TimerElapsed;
        timer.Start();
    }


    private void TimerElapsed(object sender, System.Timers.ElapsedEventArgs e)
    {
        if (TimerInSeconds > 0)
        {
            TimerInSeconds--;
            InvokeAsync(StateHasChanged);
        }
        else
        {
            timer?.Stop();
        }
    }

    public void Pause()
    {
        timer?.Stop();
    }

    public void TurnOff()
    {
        timer?.Stop();
        TimerInSeconds = 0;
    }

}
