@if (Href == null)
{
    <button type="@_buttonFormType" id="@Id" class="app-button @_buttonTypeClass @_fullWidthClass @Class" @onclick="OnClickHandler" style="padding-left: @Padding; padding-right: @Padding">
        @Text
    </button>
}
else
{
    <a type="@_buttonFormType" id="@Id" href="@Href" class="app-button @_buttonTypeClass @_fullWidthClass" @onclick="OnClickHandler" style="padding-left: @Padding; padding-right: @Padding">
        @Text
    </a>
}
@code {
    [Parameter]
    public string? Id { get; set; }

    [Parameter]
    public string Class { get; set; } = string.Empty;

    [Parameter]
    public string Text { get; set; } = "Button";

    [Parameter]
    public string Padding { get; set; } = "10px";

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public string? Href { get; set; }

    [CascadingParameter(Name = "ParentDisabled")]
    private bool ParentDisabled { get; set; }

    #region FullWidth
    [Parameter]
    public bool FullWidth { get; set; }
    private bool lastFullWidth;
    private string _fullWidthClass = string.Empty;
    private const string _fullWidthClassName = "full-width";
    #endregion

    #region ButtonFormType
    [Parameter]
    public AppButtonFormType FormType { get; set; } = AppButtonFormType.Button;
    private AppButtonFormType lastFormType = AppButtonFormType.Button;
    private string _buttonFormType = StyleConstants.Button;
    #endregion

    #region ButtonType
    [Parameter]
    public AppButtonType ButtonType { get; set; } = AppButtonType.Primary;
    private AppButtonType lastButtonType = AppButtonType.Primary;
    private string _buttonTypeClass = "app-button-primary";
    #endregion

    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (lastButtonType != ButtonType)
        {
            _buttonTypeClass = ButtonType == AppButtonType.Primary ? StyleConstants.AppPrimaryButton : StyleConstants.AppSecondaryButton;
            lastButtonType = ButtonType;
        }

        if (lastFullWidth != FullWidth)
        {
            _fullWidthClass = FullWidth ? _fullWidthClassName : string.Empty;
            lastFullWidth = FullWidth;
        }

        if(lastFormType != FormType)
        {
            _buttonFormType = FormType switch
            {
                AppButtonFormType.Button => StyleConstants.Button,
                AppButtonFormType.Submit => StyleConstants.Submit,
                AppButtonFormType.Reset => StyleConstants.Reset,
                _=> throw new ArgumentException()
            };
            lastFormType = FormType;
        }
    }


    protected bool GetDisabledState() => Disabled || ParentDisabled;
    protected virtual async Task OnClickHandler(MouseEventArgs ev)
    {
        if (GetDisabledState())
            return;
        await OnClick.InvokeAsync(ev);
    }

    #region Classes
    public enum AppButtonType
    {
        Primary,
        Secondary
    }
    public enum AppButtonFormType
    {
        Button,
        Reset,
        Submit
    }
    #endregion

    #region StyleClassNameConstants
    private class StyleConstants
    {
        public const string AppPrimaryButton = "app-button-primary";
        public const string AppSecondaryButton = "app-button-secondary";

        public const string Reset = "reset";
        public const string Button = "button";
        public const string Submit = "submit";

    }
    #endregion
}
