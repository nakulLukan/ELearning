<MudStack Spacing="1">
    <MudText Class="my-2 text-center">@OptionLabel</MudText>
    <MudTabs @ref="_mudTab"
             Elevation="0"
             ApplyEffectsToContainer="true"
             PanelClass="pa-4"
             TabHeaderClass="bg-transparent"
             Rounded>
        <MudTabPanel Text="Text">
            <MudTextField T="string"
                          ValueChanged="AnswerChanged"
                          Value="@AnswerText"
                          Lines="2"
                          AutoGrow
                          ShrinkLabel
                          Variant="Variant.Outlined" />
        </MudTabPanel>
        <MudTabPanel Text="Image">
            <MudStack AlignItems="AlignItems.Center" Spacing="2">

                @if (!string.IsNullOrEmpty(_imagePreviewUrl))
                {
                    <MudImage Src="@_imagePreviewUrl"
                              Alt="Image preview of the option"
                              ObjectFit="ObjectFit.Contain"
                              Class="rounded-lg"
                              Height="100" />
                }
                else
                {
                    <div style="height:100px; width:100px; border: 2px dashed var(--mud-palette-table-lines);">
                    </div>
                }
                <MudFileUpload T="IBrowserFile" FilesChanged="HandleSelected" Accept=".png,.jpeg,.jpg">
                    <ActivatorContent>
                        <MudButton Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.AddPhotoAlternate">Choose an image</MudButton>
                    </ActivatorContent>
                </MudFileUpload>
            </MudStack>
        </MudTabPanel>
    </MudTabs>
</MudStack>

@code {

    [EditorRequired]
    [Parameter]
    public required string OptionLabel { get; set; }

    #region ImagePreviewUrl
    private string? lastImagePreviewUrl;
    private string? _imagePreviewUrl;

    [Parameter]
    public string? ImagePreviewUrl { get; set; }
    #endregion

    #region AnswerText
    private string? answerText;
    private string? lastAnswerText;
    [Parameter]
    public string? AnswerText
    {
        get => answerText;
        set
        {
            if (value != answerText)
            {
                answerText = value;
                AnswerTextChanged.InvokeAsync(value);
            }
        }
    }
    [Parameter] public EventCallback<string?> AnswerTextChanged { get; set; }
    #endregion

    #region AnswerImage
    private byte[]? answerImage;
    private byte[]? lastAnswerImage;
    [Parameter]
    public byte[]? AnswerImage
    {
        get => answerImage;
        set
        {
            if (value != answerImage)
            {
                answerImage = value;
                AnswerImageChanged.InvokeAsync(value);
            }
        }
    }
    [Parameter] public EventCallback<byte[]?> AnswerImageChanged { get; set; }
    #endregion

    private MudTabs? _mudTab;

    private async Task HandleSelected(IBrowserFile file)
    {
        if (file != null)
        {
            var resizedFile = await file.RequestImageFileAsync(file.ContentType, 128, 128);
            var bytearray = new byte[resizedFile.Size];
            using var stream = resizedFile.OpenReadStream();
            await stream.ReadAsync(bytearray);
            AnswerImage = bytearray;
        }
    }

    private void UpdateImagePreview()
    {
        if (AnswerImage == null)
        {
            return;
        }
        _imagePreviewUrl = $"data:image/png;base64,{Convert.ToBase64String(AnswerImage)}";
        AnswerText = null;
        StateHasChanged();
    }

    private void UpdateImagePreviewFromUrl()
    {
        _imagePreviewUrl = ImagePreviewUrl;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (lastAnswerText != AnswerText
            && !string.IsNullOrEmpty(AnswerText))
        {
            SwitchTab(0);
            lastAnswerText = AnswerText;
        }
        else if (lastAnswerImage != AnswerImage
            && AnswerImage != null)
        {
            SwitchTab(1);
            UpdateImagePreview();
            lastAnswerImage = AnswerImage;
        }
        else if (ImagePreviewUrl != lastImagePreviewUrl)
        {
            SwitchTab(1);
            UpdateImagePreviewFromUrl();
            lastImagePreviewUrl = ImagePreviewUrl;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;
        if (!string.IsNullOrEmpty(ImagePreviewUrl))
        {
            SwitchTab(1);
        }
    }

    private void SwitchTab(int index)
    {
        if (_mudTab != null)
        {
            _mudTab.ActivePanelIndex = index;
        }
    }

    private void AnswerChanged(string text)
    {
        AnswerText = text;
        AnswerImage = null;
        _imagePreviewUrl = string.Empty;
    }
}
