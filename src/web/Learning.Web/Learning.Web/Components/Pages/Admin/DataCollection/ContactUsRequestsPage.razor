@page "/Admin/contact-us-requests"
@using Learning.Business.Requests.DataCollection.ContactUsRequest
@using Learning.Business.Requests.Subscription.Offer
@using Learning.Shared.Common.Extensions
@using Learning.Shared.Contracts.HttpContext
@using Learning.Shared.Dto.DataCollection.ContactUsRequest
@using Learning.Shared.Dto.Subscription.Offer
@using Learning.Web.Components.Layouts
@inject IRequestContext RequestContext
@layout AdminLayout
@inherits AppBaseComponent
@attribute [Authorize(PolicyConstant.ContactUsRequestPolicy)]

<MudDataGrid @ref=_dataGrid T="GetAllContactUsQueryResponseDto" Virtualize="true" Groupable="false" Bordered ShowMenuIcon="false" FixedHeader Dense
			 Hover RowClass="cursor-pointer" Loading="@_isLoading" ServerData="LoadContactRequests" Style="height: 100%"
			 Filterable=false SortMode="SortMode.None" FixedFooter Height="calc(100% - 130px)" Striped>
	<ToolBarContent>
		<MudText Typo="Typo.h6"><b>Contact Us Requests</b></MudText>
		<MudSpacer />
		<MudTextField @bind-Value="@SearchString" Lines="1" MaxLines=1 InputType=InputType.Text
					  Placeholder="@(@"Search by City")" Adornment="Adornment.Start" Immediate
					  AdornmentIcon="@Icons.Material.Filled.Search" Variant=Variant.Outlined Margin=Margin.Dense
					  IconSize="Size.Medium" Class="mt-0" Clearable AutoGrow
					  OnClearButtonClick="OnClear"></MudTextField>
		<MudButton Variant="Variant.Outlined" Class="ml-2" OnClick="OnSearch">Search</MudButton>
	</ToolBarContent>
	<Columns>
		<PropertyColumn Property="x => x.City" Title="City" Sortable="true" />
		<PropertyColumn Property="x => x.Name" Title="Name" />
		<PropertyColumn Property="x => x.ContactNumber" Title="Contact Number" />
		<PropertyColumn Property="x => x.EmailAddress" Title="Email Address" />
		<PropertyColumn Property="x => x.RequestedOn.ToLocalDateTimeString()" Title="Requested On" />
	</Columns>
	<LoadingContent>
		Loading...
	</LoadingContent>
	<NoRecordsContent>
		<NoRecordsComponent />
	</NoRecordsContent>
	<PagerContent>
		<MudDataGridPager T="GetAllContactUsQueryResponseDto" />
	</PagerContent>
</MudDataGrid>
@code {
	[SupplyParameterFromQuery(Name = "Search")]
	public string? SearchString { get; set; }
	private string? _lastSearchString;

	MudDataGrid<GetAllContactUsQueryResponseDto> _dataGrid;
	GridState<GetAllContactUsQueryResponseDto> _gridState;

	private string? userRole;

	protected override async Task OnInitializedAsync()
	{
		userRole = await RequestContext.GetUserRole();
	}

	private async Task<GridData<GetAllContactUsQueryResponseDto>> LoadContactRequests(GridState<GetAllContactUsQueryResponseDto> gridState)
	{
		_gridState = gridState;
		var sortBy = gridState.SortDefinitions.FirstOrDefault();
		var response = (await Mediator.Send(new GetAllContactusQuery()
			{
				Skip = gridState.PageSize * gridState.Page,
				Take = gridState.PageSize,
				CityFilter = SearchString,
			}));
		return new GridData<GetAllContactUsQueryResponseDto>
			{
				TotalItems = response.TotalRecords,
				Items = response.Data,
			};
	}

	private async Task OnSearch()
	{
		await _dataGrid!.ReloadServerData();
		_lastSearchString = SearchString;
	}

	private async Task OnClear()
	{
		SearchString = _lastSearchString = string.Empty;
		await OnSearch();
	}
}

