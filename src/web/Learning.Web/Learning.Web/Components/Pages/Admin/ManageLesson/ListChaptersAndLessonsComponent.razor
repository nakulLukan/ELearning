@using Learning.Business.Dto.Core.Lesson
@using Learning.Business.Requests.Core.Subject
@using Learning.Business.Requests.Core.Subject.ManageSubject
@inject IDialogService Dialog
@inherits AppBaseComponent
<MudStack>
    <AddChapterComponent @ref=_addChapterComponent SubjectId="SubjectId" OnChapterAdded="LoadLessons"></AddChapterComponent>
    <MudPaper Class="pl-2 m-1 ">
        <MudList T="string" ReadOnly="false">
            @foreach (var chapter in _chapters)
            {
                <MudListItem Text="@chapter.ChapterName" Expanded=true>
                    <NestedList>
                        @foreach (var lesson in chapter.Lessons)
                        {
                            <MudListItem>
                                <div class="d-flex flex-column">
                                    <MudText Typo="Typo.subtitle1">@lesson.LessonName</MudText>
                                        <MudStack Row AlignItems="AlignItems.Start" Justify="Justify.FlexStart">
                                     <MudText Typo="Typo.caption">@lesson.Duration</MudText>
                                            @if (!lesson.IsPreviewable)
                                        {
                                            <MudIcon Icon="@Icons.Material.TwoTone.Lock" Size="Size.Small"/>
                                        }
                                    </MudStack>
                                </div>
                            </MudListItem>
                        }
                        <MudListItem Ripple=false>
                            <MudButtonGroup Variant="Variant.Outlined">
                                <MudButton Color="Color.Success" OnClick="(()=> OnAddChapterClicked(chapter.ChapterId))" Size="Size.Small">Add Chapter</MudButton>
                                <MudButton Color="Color.Success" OnClick="@(x=> OnAddLessonClick(chapter.ChapterId))" Size="Size.Small">Add Lesson</MudButton>
                            </MudButtonGroup>
                        </MudListItem>
                    </NestedList>
                </MudListItem>
            }
        </MudList>
    </MudPaper>
</MudStack>
@code {
    
    [EditorRequired]
    [Parameter]
    public int? SubjectId { get; set; }

    private List<ChapterListViewItemDto> _chapters = new();

    private bool _showAddLessonDialog = false;
    AddChapterComponent _addChapterComponent;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        await LoadLessons();
        StateHasChanged();
    }

    private async Task LoadLessons()
    {
        if (!SubjectId.HasValue)
        {
            return;
        }
        _chapters = await Mediator.Send(new ChaptersAndLessonsQuery()
            {
                SubjectId = SubjectId.Value
            });
    }

    private void OnAddChapterClicked(int prevChapterId)
    {
        _addChapterComponent.OpenDialog(prevChapterId);
    }

    private void OnAddLessonClick(int chapterId)
    {
        DialogOptions dialogOptions = new DialogOptions()
            {
                MaxWidth = MaxWidth.ExtraLarge,
                NoHeader = true,
                FullWidth = true,
                CloseButton = true,
                BackdropClick = false,
            };
        DialogParameters dialogParams = new DialogParameters()
            {
                [nameof(AddLessonComponent.SubjectId)] = SubjectId,
                [nameof(AddLessonComponent.ChapterId)] = chapterId,
                [nameof(AddLessonComponent.LessonOrderWrtChapter)] = 0,
                [nameof(AddLessonComponent.OnLessonAdded)] = EventCallback.Factory.Create<int>(this, OnLessonAdded)
            };
        Dialog.Show<AddLessonComponent>("", dialogParams, dialogOptions);
    }

    private async Task OnLessonAdded(int videoId)
    {
        await LoadLessons();
    }

}
