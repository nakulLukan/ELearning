@using Learning.Business.Dto.Core.ClassDivision
@using Learning.Business.Requests.Core.Course
@using Learning.Web.Components.Pages.Admin.ManageCourse
@using Learning.Web.Extensions
@inherits AppBaseComponent

<EditForm Model="@model" OnValidSubmit="OnValidSubmit" FormName="add-class">
    <DataAnnotationsValidator />
    <MudGrid>
        <MudItem xs="12">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.h5">Add new class</MudText>
                </MudCardHeader>
                <MudCardContent>
                    <CourseSelectComponent For="@(()=> model.CourseId)" @bind-Value="model.CourseId" />
                    <MudTextField Label="Class Name" Class="mt-3" Variant="Variant.Outlined"
                                  @bind-Value="model.ClassName" For="@(() => model.ClassName)" />
                    <MudTextField Label="Short Code" Class="mt-3" Variant="Variant.Outlined"
                                  @bind-Value="model.ShortCode" For="@(() => model.ShortCode)" />
                    <MudTextField Label="Description" Class="mt-3" Lines="3" MaxLines="4" Variant="Variant.Outlined"
                                  @bind-Value="model.Description" For="@(() => model.Description)" />
                    <MudCheckBox @bind-Value="@model.IsActive" Size="Size.Medium" Color="Color.Primary">@(model.IsActive ? "Enabled" : "Disabled")</MudCheckBox>
                </MudCardContent>
                <MudCardActions>
                    <AppProgressButton ButtonType="ButtonType.Submit" IsProgressing="_isLoading"
                                       Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Add Class</AppProgressButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>
@code {

    [Parameter]
    public EventCallback OnClassAdded { get; set; }

    AddClassDto model = new();

    private async Task OnValidSubmit(EditContext context)
    {
        ChangeToLoadingState();
        await AppMediator.Send(new AddClassCommand
            {
                Description = model.Description,
                IsActive = model.IsActive,
                ShortCode = model.ShortCode,
                ClassName = model.ClassName,
                CourseId = model.CourseId
            })
            .OnSuccess(data =>
            {
                ToastService.Success("New class added");
                ChangeToLoadedState();
                model = new();
                Refresh();
                InvokeAsync(OnClassAdded.InvokeAsync);
            })
            .OnError(err =>
            {
                ToastService.Error(err.Message);
                ChangeToLoadedState();
            });
    }
}
