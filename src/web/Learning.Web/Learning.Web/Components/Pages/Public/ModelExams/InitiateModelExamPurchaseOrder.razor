@page "/model-exams/{modelExamOrderId:long}/initiate-order"
@using Learning.Business.Dto.Notifications.ExamNotification.ModelExam.Payment
@using Learning.Business.Requests.Notifications.ExamNotification.ModelExam.Payment
@using Learning.Web.Client.Contracts.Interop
@using Learning.Web.Client.Impl.Interop
@using Razorpay.Api
@inject IMediator Mediator
@inject IAppJSInterop JSRuntime
@rendermode InteractiveServer
<div>
    @if (_orderDetails != null)
    {
        <h1>@_orderDetails.Status</h1>
    }
</div>
@code {
    [Parameter]
    public long ModelExamOrderId { get; set; }

    private ModelExamOrderStepDetailDto? _orderDetails;

    protected override async Task OnInitializedAsync()
    {
        _orderDetails = await Mediator.Send(new GetModelExamOrderByIdQuery
            {
                ModelExamOrderId = ModelExamOrderId
            });

        if (_orderDetails.Status == Shared.Common.Enums.OrderStatusEnum.Initiated)
        {
            _orderDetails = await Mediator.Send(new CreateRazorpayOrderCommand
                {
                    ModelExamOrderId = ModelExamOrderId
                });
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        if (_orderDetails != null && _orderDetails.Status == Shared.Common.Enums.OrderStatusEnum.RzrpayOrderCreated)
        {
            await JSRuntime.InitRazorpayPopup(UIConstant.AppName, _orderDetails!.RazorpayOrderId!, _orderDetails.Name, _orderDetails.Email, _orderDetails.PhoneNumber!, $"#ME{_orderDetails.ModelExamOrderId}");
        }
    }
}
