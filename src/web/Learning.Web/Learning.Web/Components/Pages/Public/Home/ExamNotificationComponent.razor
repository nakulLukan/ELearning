@using Learning.Business.Requests.Notifications.ExamNotification
@using MediatR
@inject IMediator Mediator

<div id="exam-notififcation-carousel" class="carousel slide" data-ride="carousel" data-interval="5000">
    <ol class="carousel-indicators">
        @foreach (var notification in _examNotifications)
        {
            string activeClass = _examNotifications.IndexOf(notification) == 0 ? "active" : string.Empty;
            <li data-target="#exam-notififcation-carousel"
                data-slide-to="@_examNotifications.IndexOf(notification)"
                class="@activeClass"></li>
        }
    </ol>
    <div class="carousel-inner">
        @foreach (var notification in _examNotifications)
        {
            string activeClass = _examNotifications.IndexOf(notification) == 0 ? "active" : string.Empty;
            <div class="carousel-item @activeClass">
                <MudImage Class="d-block w-100"
                          Src="@notification.ImagePath"
                          Alt="Exam-Notification"
                          ObjectFit="ObjectFit.Cover"></MudImage>
                <div class="carousel-caption">
                    <MudPaper Class="p-4" Elevation="5">
                        <MudText Typo="Typo.h6"> @notification.Title</MudText>
                        <MudText Typo="Typo.caption">@notification.Description</MudText>
                        <MudButton Class="d-block mt-4 "
                                   Href="@($"/exam-notifications/{notification.ExamNotificationId}/apply")"
                                   Color="Color.Primary">APPLY NOW</MudButton>
                    </MudPaper>
                </div>
            </div>
        }
    </div>

</div>

@code {
    private List<ExamNotificationDto> _examNotifications = new();

    protected override async Task OnInitializedAsync()
    {
        var examNotifications = await Mediator.Send(new ActiveHomepageExamNotificationsQuery());
        _examNotifications = examNotifications.Select(x => new ExamNotificationDto
            {
                Description = x.Description,
                ExamNotificationId = x.NotificationId,
                ImagePath = x.ImagePath,
                Title = x.Title,
            }).ToList();
    }


    public class ExamNotificationDto
    {
        public required int ExamNotificationId { get; set; }
        public required string Title { get; set; }
        public required string Description { get; set; }
        public required string ImagePath { get; set; }
    }
}
