@using Learning.Business.Requests.Notifications.ExamNotification
@using MediatR
@inject IMediator Mediator

<div id="examNotififcationCarousel" class="carousel slide" data-bs-ride="carousel" data-interval="5000">
    <div class="carousel-inner">
        @foreach (var notification in _examNotifications)
        {
            string activeClass = _examNotifications.IndexOf(notification) == 0 ? "active" : string.Empty;
            <div class="carousel-item @activeClass">
                <MudImage Class="d-block w-100"
                          Src="@notification.ImagePath"
                          Alt="Exam-Notification"
                          ObjectFit="ObjectFit.Cover"></MudImage>
                <div class="carousel-caption d-flex align-items-center">
                    <MudPaper Class="p-3">
                        <MudText Typo="Typo.h6"> @notification.Title</MudText>
                        <MudText Typo="Typo.caption">@notification.Description</MudText>
                        <MudButton Class="d-block mt-4 "
                                   Href="@($"/exam-notifications/{notification.ExamNotificationId}/apply")"
                                   Color="Color.Primary">APPLY NOW</MudButton>
                    </MudPaper>
                </div>
            </div>
        }
    </div>
    <button class="carousel-control-prev" type="button" data-bs-target="#examNotififcationCarousel" data-bs-slide="prev">
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Previous</span>
    </button>
    <button class="carousel-control-next" type="button" data-bs-target="#examNotififcationCarousel" data-bs-slide="next">
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Next</span>
    </button>
</div>

@code {
    private List<ExamNotificationDto> _examNotifications = new();

    protected override async Task OnInitializedAsync()
    {
        var examNotifications = await Mediator.Send(new ActiveHomepageExamNotificationsQuery());
        _examNotifications = examNotifications.Select(x => new ExamNotificationDto
            {
                Description = x.Description,
                ExamNotificationId = x.NotificationId,
                ImagePath = x.ImagePath,
                Title = x.Title,
            }).ToList();
    }


    public class ExamNotificationDto
    {
        public required int ExamNotificationId { get; set; }
        public required string Title { get; set; }
        public required string Description { get; set; }
        public required string ImagePath { get; set; }
    }
}
