@page "/account/signup"
@using Learning.Shared.Application.Exceptions.Identity
@using Learning.Shared.Constants
@using Learning.Web.Client.Components.Controls.Actions
@using Learning.Web.Client.Components.Controls.Feedback
@using Learning.Web.Client.Components.Controls.Input
@using Learning.Web.Client.Components.Pages
@using Learning.Web.Components.Layouts
@using Learning.Web.Contracts.Authentication
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.RateLimiting
@layout UserSessionLayout
@inject IUserManager UserManager
@inject INavigationService NavigationManager
@attribute [EnableRateLimiting(RateLimitingPolicyConstant.SignupPage)]
<PageTitle>BTS Sign Up</PageTitle>

<AppPage Class="d-flex flex-column flex-grow-1">
	<MudContainer Class="flex-grow-1 d-flex flex-column flex-grow-1" MaxWidth="MaxWidth.ExtraLarge">
		<div class="my-10 my-md-17"></div>
		<div class="d-flex flex-column flex-md-row flex-grow-1 gap-3">
			<div class="d-flex flex-column align-center flex-grow-1">
				<EditForm Model="@Model"
						  FormName="Signup"
						  OnValidSubmit="SignUp"
						  class="d-flex flex-column align-center justify-center align-stretch signup-form">
					<DataAnnotationsValidator />
					<div class="d-flex flex-column gap-3 gap-md-6 form-input-container">
						<h3 class="mb-1 mb-md-12 mt-5 mt-md-0">Create an account</h3>
						<AppTextFieldV2 Label="Phone Number"
										@bind-Value="@Model.Username"
										For="(()=> Model.Username)"></AppTextFieldV2>
						<AppTextFieldV2 Label="Name"
										@bind-Value="@Model.Name"
										For="(()=> Model.Name)"></AppTextFieldV2>
						<AppTextFieldV2 Label="Your location (City)"
										@bind-Value="@Model.Address"
										For="(()=> Model.Address)"></AppTextFieldV2>
						<AppTextFieldV2 Label="Password"
										IsPassword
										@bind-Value="@Model.Password"
										For="(()=> Model.Password)"></AppTextFieldV2>
						<AppTextFieldV2 Label="Confirm Password"
										IsPassword
										@bind-Value="@Model.ConfirmPassword"
										For="(()=> Model.ConfirmPassword)"></AppTextFieldV2>
						@if (!string.IsNullOrEmpty(_globalErrorMessage))
						{
							<AppAlert Text="@_globalErrorMessage"></AppAlert>

						}
						<AppButton Text="Create Account" Class="mt-2 mt-md-3"
								   FormType="AppButton.AppButtonFormType.Submit"></AppButton>
					</div>
				</EditForm>
			</div>
		</div>
	</MudContainer>
</AppPage>
@code {

	[Parameter, SupplyParameterFromQuery]
	public string? Username { get; set; }

	[SupplyParameterFromForm]
	public SignUpModel Model { get; set; } = new();
	private string _globalErrorMessage = "";

	protected override void OnInitialized()
	{
		Model.Username ??= Username;
	}

	private async Task SignUp()
	{
		try
		{
			_globalErrorMessage = string.Empty;
			var otpId = await UserManager.SignUpUser(Model.Username!, Model.Password!, Model.Name!, Model.Address!);
			NavigationManager.NavigateToAccountConfirmation(Model.Username!);
		}
		catch (ExternalIdentityProviderException ex)
		{
			if (ex.Type == ExternalIdentityProviderExceptionType.UserAlreadyExists)
			{
				_globalErrorMessage = "Account already exists";
			}
		}
	}

	public class SignUpModel
	{
		[Required]
		[RegularExpression(RegexExpConst.GeneralPhoneNumber, ErrorMessage = RegexExpConst.GeneralPhoneNumberMessage)]
		public string? Username { get; set; }

		[Required]
		[MaxLength(50)]
		[RegularExpression(RegexExpConst.GeneralPassword, ErrorMessage = RegexExpConst.GeneralPasswordPolicyMessage)]
		public string? Password { get; set; }

		[Required]
		[Compare(nameof(Password), ErrorMessage = "Passwords do not match.")]
		public string? ConfirmPassword { get; set; }

		[Required]
		[MaxLength(50)]
		[RegularExpression(RegexExpConst.GeneralName, ErrorMessage = RegexExpConst.GeneralNameMessage)]
		public string? Name { get; set; }

		[Required]
		[MaxLength(50)]
		[RegularExpression(RegexExpConst.GeneralPlace, ErrorMessage = RegexExpConst.GeneralPlaceMessage)]
		public string? Address { get; set; }
	}
}
