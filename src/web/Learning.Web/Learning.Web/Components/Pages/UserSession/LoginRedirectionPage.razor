@page "/account/login"
@using Learning.Shared.Application.Exceptions.Identity
@using Learning.Shared.Constants
@using Learning.Web.Client.Components.Controls.Actions
@using Learning.Web.Client.Components.Controls.Feedback
@using Learning.Web.Client.Components.Controls.Input
@using Learning.Web.Client.Components.Pages
@using Learning.Web.Client.Components.Pages.Home.Footer
@using Learning.Web.Components.Layouts
@using Learning.Web.Contracts.Authentication
@using System.ComponentModel.DataAnnotations
@inject IUserManager UserManager
@layout UserSessionLayout
@inject INavigationService NavigationManager
<PageTitle>BTS Login</PageTitle>

<AppPage Class="d-flex flex-column flex-grow-1">
	<MudContainer Class="flex-grow-1 d-flex flex-column flex-grow-1" MaxWidth="MaxWidth.ExtraLarge">
		<div class="my-10 my-md-17"></div>
		<div class="d-flex flex-column flex-md-row flex-grow-1 gap-3">
			<div class="d-flex flex-column align-center flex-grow-1">
				<div class="d-flex flex-column flex-grow-1 justify-start justify-md-center align-center w-100">

					<EditForm Model="@Model"
							  FormName="Login"
							  OnValidSubmit="Login"
							  class="d-flex flex-column align-center justify-center w-100">
						<DataAnnotationsValidator />
						<div class="d-flex flex-column gap-3 gap-md-6 form-input-container">
							<h3 class="mb-1 mb-md-12 mt-5 mt-md-0">Login to @UIConstant.AppName</h3>
							<AppTextFieldV2 Label="Phone Number"
											@bind-Value="@Model.Username"
											For="(()=> Model.Username)"></AppTextFieldV2>
							<AppTextFieldV2 Label="Password"
											IsPassword="true"
											@bind-Value="@Model.Password"
											For="(()=> Model.Password)"></AppTextFieldV2>
							@if (!string.IsNullOrEmpty(_globalErrorMessage))
							{
								<AppAlert Text="@_globalErrorMessage"></AppAlert>

							}
							<a class="app-link my-1 my-md-3" Href=@($"/account/reset-password?username={Model.Username}")>Forgot Password</a>
							<AppButton Text="Login"
									   FormType="AppButton.AppButtonFormType.Submit"></AppButton>
							<div class="signup-label d-flex gap-1 justify-center align-center">
								<span>Need an account?</span>
								<a class="app-link my-1 my-md-3" Href=@($"/account/signup?username={Model.Username}")>Sign Up</a>
							</div>

						</div>
						<div class="d-flex gap-md-5 gap-3  mt-20 mt-md-12">
							<Learning.Web.Client.Components.Pages.General.SocialMediaBannerComponent />
						</div>
					</EditForm>
				</div>
			</div>
		</div>
	</MudContainer>
</AppPage>
@code {
	[SupplyParameterFromForm]
	public LoginModel Model { get; set; } = new();
	private string _globalErrorMessage = "";
	private async Task Login()
	{
		_globalErrorMessage = "";
		bool isSuccess = false;
		try
		{
			await UserManager.Login(Model.Username!, Model.Password!);
			isSuccess = true;
		}
		catch (ExternalIdentityProviderException ex)
		{
			if (ex.Type == ExternalIdentityProviderExceptionType.AccountNotFound)
			{
				NavigationManager.NavigateTo($"account/signup?RedirectUrl={Uri.EscapeDataString(RedirectUrl ?? string.Empty)}&username={Uri.EscapeDataString(Model.Username!)}");
			}
			else if (ex.Type == ExternalIdentityProviderExceptionType.NotAuthorized)
			{
				_globalErrorMessage = ex.Message!;
			}
		}
		catch (Exception)
		{
			_globalErrorMessage = "Oops, something went wrong";
		}
		if (isSuccess)
		{
			NavigationManager.NavigateTo(RedirectUrl ?? "", true);
		}
	}

	[Parameter, SupplyParameterFromQuery]
	public required string? RedirectUrl { get; set; }

	protected override async Task OnInitializedAsync()
	{

		await UserManager.Logout();
	}

	protected override void OnAfterRender(bool firstRender)
	{
		base.OnAfterRender(firstRender);
		if (!firstRender) return;
	}

	public class LoginModel
	{
		[Required]
		[RegularExpression(RegexExpConst.GeneralPhoneNumber, ErrorMessage = RegexExpConst.GeneralPhoneNumberMessage)]
		[Display(Name = "Mobile Number")]
		public string? Username { get; set; }

		[Required]
		[MaxLength(50)]
		[RegularExpression(RegexExpConst.GeneralPassword, ErrorMessage = RegexExpConst.GeneralPasswordMessage)]
		[Display(Name = "Password")]
		public string? Password { get; set; }
	}
}
