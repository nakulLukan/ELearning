@page "/account/reset-password"
@attribute [EnableRateLimiting(RateLimitingPolicyConstant.ForgotPasswordPage)]
@using Learning.Business.Requests.Identity
@using Learning.Shared.Application.Contracts.Identity
@using Learning.Shared.Application.Exceptions.Identity
@using Learning.Shared.Application.Helpers
@using Learning.Shared.Constants
@using Learning.Web.Client.Components.Controls.Actions
@using Learning.Web.Client.Components.Controls.Feedback
@using Learning.Web.Client.Components.Controls.Input
@using Learning.Web.Client.Components.Pages
@using Learning.Web.Components.Layouts
@using Microsoft.AspNetCore.RateLimiting
@using System.ComponentModel.DataAnnotations
@layout UserSessionLayout
@inject INavigationService NavigationManager
@inject IExternalIdentityProvider IdentityProvider
@rendermode InteractiveServer
<PageTitle>BTS Forgot Password</PageTitle>

<AppPage Class="d-flex flex-column flex-grow-1">
	<MudContainer Class="flex-grow-1 d-flex flex-column flex-grow-1" MaxWidth="MaxWidth.ExtraLarge">
		<div class="my-10 my-md-17"></div>
		<div class="d-flex flex-column flex-md-row flex-grow-1 gap-3">
			<div class="d-flex flex-column align-center flex-grow-1">
				@if (!_showConfirmPassword)
				{
					<EditForm Model="@PhoneNumberModel"
							  FormName="forgotPasswordUsername"
							  OnValidSubmit="ForgotPassword" Enhance
							  class="d-flex flex-column align-center justify-center align-stretch forgot-password-form">
						<DataAnnotationsValidator />
						<div class="d-flex flex-column gap-3 gap-md-6 form-input-container">
							<h3 class="mb-1 mb-md-12 mt-5 mt-md-0">Forgot Password</h3>
							<AppTextFieldV2 Label="Phone Number"
											@bind-Value="@PhoneNumberModel.PhoneNumber"
											For="(()=> PhoneNumberModel.PhoneNumber)"></AppTextFieldV2>
							@if (!string.IsNullOrEmpty(_globalErrorMessage))
							{
								<AppAlert Text="@_globalErrorMessage"></AppAlert>
							}
							<AppButton Text="Submit" Class="mt-2 mt-md-3"
									   FormType="AppButton.AppButtonFormType.Submit"></AppButton>
						</div>
					</EditForm>
				}
				else
				{
					<EditForm Model="@Model"
							  FormName="forgotPassword"
							  OnValidSubmit="ForgotPassword" Enhance
							  class="d-flex flex-column align-center justify-center align-stretch forgot-password-form">
						<DataAnnotationsValidator />
						<div class="d-flex flex-column gap-3 gap-md-6 form-input-container">
							<h3 class="mb-1 mb-md-12 mt-5 mt-md-0">Forgot Password?</h3>
							<AppTextFieldV2 Label="Otp"
											@bind-Value="@Model.Otp"
											For="(()=> Model.Otp)"></AppTextFieldV2>
							<AppTextFieldV2 Label="Password"
											IsPassword
											@bind-Value="@Model.Password"
											For="(()=> Model.Password)"></AppTextFieldV2>
							<AppTextFieldV2 Label="Confirm Password"
											IsPassword
											@bind-Value="@Model.ConfirmPassword"
											For="(()=> Model.ConfirmPassword)"></AppTextFieldV2>

							<AppButton Text="Submit" Class="mt-2 mt-md-3"
									   FormType="AppButton.AppButtonFormType.Submit"></AppButton>
						</div>
					</EditForm>
				}
			</div>
		</div>
	</MudContainer>
</AppPage>

@code {
	public EnterPhoneNumberModel PhoneNumberModel { get; set; } = new();
	public ForgotPasswordModel Model { get; set; } = new();

	[Parameter, SupplyParameterFromQuery]
	public string? Username { get; set; }
	private string? _globalErrorMessage;

	private bool _showConfirmPassword = false;

	protected override void OnInitialized()
	{
		PhoneNumberModel.PhoneNumber ??= Username;
	}

	private async Task ForgotPassword()
	{
		if (!_showConfirmPassword)
		{
			try
			{
				_globalErrorMessage = string.Empty;
				var userDetails = await IdentityProvider.GetUserDetailsByUsername(IdentityHelper.ToMobileNumber(PhoneNumberModel.PhoneNumber!));
				await Mediator.Send(new CreateOtpCommand
					{
						MobileNumber = PhoneNumberModel.PhoneNumber!,
						IsPasswordRecovery = true
					});
				_showConfirmPassword = true;
			}
			catch (ExternalIdentityProviderException ex)
			{
				if (ex.Type == ExternalIdentityProviderExceptionType.AccountNotFound)
				{
					_globalErrorMessage = "No account with given number found.";
				}
			}
			catch (Exception)
			{
				_globalErrorMessage = "Oops. Something went wrong.";
			}
		}
		else
		{
			var response = await Mediator.Send(new ChangePasswordCommand
				{
					MobileNumber = IdentityHelper.ToMobileNumber(PhoneNumberModel.PhoneNumber!),
					NewPassword = Model.ConfirmPassword!,
					Otp = int.Parse(Model.Otp!),
				});

			if (response.Data)
			{
				NavigationManager.NavigateToLogin(suppressRedirect: true);
			}
		}
	}


	public class EnterPhoneNumberModel
	{
		[Required]
		[RegularExpression(RegexExpConst.GeneralPhoneNumber, ErrorMessage = RegexExpConst.GeneralPhoneNumberMessage)]
		[Display(Name = "Mobile Number")]
		public string? PhoneNumber { get; set; }
	}

	public class ForgotPasswordModel
	{
		[Required]
		[RegularExpression(RegexExpConst.GeneralOtp, ErrorMessage = RegexExpConst.GeneralOtpMessage)]
		[Display(Name = "OTP")]
		public string? Otp { get; set; }

		[Required]
		[MaxLength(50)]
		[RegularExpression(RegexExpConst.GeneralPassword, ErrorMessage = RegexExpConst.GeneralPasswordPolicyMessage)]
		[Display(Name = "Password")]
		public string? Password { get; set; }

		[Required]
		[Compare(nameof(Password), ErrorMessage = "Passwords do not match.")]
		[Display(Name = "Confirm Password")]
		public string? ConfirmPassword { get; set; }
	}
}
