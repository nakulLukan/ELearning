@page "/account/reset-password"
@using Learning.Business.Requests.Identity
@using Learning.Shared.Application.Contracts.Identity
@using Learning.Web.Components.Layouts
@layout UserSessionLayout
@inject INavigationService NavigationManager
@inject IExternalIdentityProvider IdentityProvider
@rendermode InteractiveServer
<h3>Forgot Password</h3>

<EditForm Model="@Model"
		  OnValidSubmit="ForgotPassword"
		  FormName="forgotpassword">
	<AntiforgeryToken />
	<DataAnnotationsValidator />
	<div class="app-contact-us-form d-flex flex-column gap-10">
		<h1 class="app-contact-us-header">Get in touch with us</h1>
		@if (!_showConfirmPassword)
		{
			<div>
				<label>
					phone number:
					<InputText @bind-Value="Model!.Username" />
				</label>
			</div>
		}

		@if (_showConfirmPassword)
		{
			<div>
				<label>
					Otp:
					<InputText @bind-Value="Model!.Otp" />
				</label>
			</div>

			<div>
				<label>
					confirm password:
					<InputText @bind-Value="Model!.Password" />
				</label>
			</div>
			<div>
				<label>
					name:
					<InputText @bind-Value="Model!.ConfirmPassword" />
				</label>
			</div>
		}

		<div>
			<button type="submit">Submit</button>
		</div>
	</div>
</EditForm>
@code {
	public ForgotPasswordModel Model { get; set; } = new();

	[Parameter, SupplyParameterFromQuery]
	public string? Username { get; set; }

	private bool _showConfirmPassword = false;

	protected override void OnInitialized()
	{
		Model.Username ??= Username;
	}

	private async Task ForgotPassword()
	{
		if (!_showConfirmPassword)
		{

			await Mediator.Send(new CreateOtpCommand
				{
					MobileNumber = Model.Username!
				});
			_showConfirmPassword = true;
		}
		else
		{
			var response = await Mediator.Send(new ChangePasswordCommand
				{
					MobileNumber = Model.Username!,
					NewPassword = Model.ConfirmPassword!,
					Otp = int.Parse(Model.Otp!),
				});

			if (response.Data)
			{
				NavigationManager.NavigateToLogin();
			}
		}
	}

	public class ForgotPasswordModel
	{
		public string? Username { get; set; }
		public string? Otp { get; set; }
		public string? Password { get; set; }
		public string? ConfirmPassword { get; set; }
	}
}
