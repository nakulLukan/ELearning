@page "/account/confirm"
@layout UserSessionLayout
@attribute [EnableRateLimiting(RateLimitingPolicyConstant.ConfirmAccountPage)]
@using Learning.Business.Requests.Identity
@using Learning.Shared.Application.Contracts.Identity
@using Learning.Shared.Constants
@using Learning.Web.Client.Components.Controls.Actions
@using Learning.Web.Client.Components.Controls.Feedback
@using Learning.Web.Client.Components.Controls.Input
@using Learning.Web.Client.Components.Pages
@using Learning.Web.Components.Layouts
@using Learning.Web.Contracts.Authentication
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.RateLimiting
@inject IUserManager UserManager
@inject INavigationService NavigationService
@inject IJSRuntime JS
<div class="mt-10"></div>
<PageTitle>BTS Verify Account</PageTitle>

<AppPage Class="d-flex flex-column flex-grow-1">
	<MudContainer Class="flex-grow-1 d-flex flex-column flex-grow-1" MaxWidth="MaxWidth.ExtraLarge">
		<div class="my-10 my-md-17"></div>
		<div class="d-flex flex-column flex-md-row flex-grow-1 gap-3">
			<div class="d-flex flex-column align-center flex-grow-1">
				<EditForm Model="@Model"
						  FormName="confirmaccount"
						  OnValidSubmit="ConfirmAccount" Enhance
						  class="d-flex flex-column align-center justify-center align-stretch verify-account-form">
					<DataAnnotationsValidator />
					<div class="d-flex flex-column gap-3 gap-md-6 form-input-container">
						<h3 class="mb-1 mb-md-12 mt-5 mt-md-0">Verify Account</h3>
						<AppTextFieldV2 Label="Enter OTP"
										@bind-Value="@Model.OTP"
										For="(()=> Model.OTP)"></AppTextFieldV2>

						@if (!string.IsNullOrEmpty(_globalErrorMessage))
						{
							<AppAlert Text="@_globalErrorMessage"></AppAlert>

						}
						<AppButton Text="Submit" Class="mt-2 mt-md-3"
								   FormType="AppButton.AppButtonFormType.Submit"></AppButton>
					</div>
				</EditForm>
				<EditForm Model="@Model"
						  FormName="resendotp"
				OnValidSubmit="ResentOtp">
					<input name="Model.OTP" @bind-value="Model.OTP" hidden />
					<button id="resendButton" disabled class="mt-3 mt-md-4 cursor-wait" type="submit">Resent OTP</button>
				</EditForm>
			</div>
		</div>
	</MudContainer>
</AppPage>
<script>
	let seconds = 120;
	let resendBtn = document.getElementById("resendButton");

	if (resendBtn != null)
	{
		var interval = setInterval(()=>{
			if (seconds > 0){
				seconds--;
				resendBtn.innerHTML = 'Resend OTP\n (wait for ' + seconds + ' seconds)';
			}
			else
			{
				resendBtn.innerHTML = 'Resend OTP';
				resendBtn.removeAttribute("disabled");
				resendBtn.classList.remove('cursor-wait');
				resendBtn.classList.add('cursor-pointer');
			}
		}, 1000)
	}
	
</script>
@code {
	[SupplyParameterFromQuery]
	public string? Username { get; set; }

	[SupplyParameterFromForm]
	public ConfirmOtpModel Model { get; set; } = new();
	private string _globalErrorMessage = "";

	private async Task ConfirmAccount()
	{
		_globalErrorMessage = string.Empty;
		var response = await UserManager.ConfirmAccount(Username!, int.Parse(Model.OTP!));
		if (response)
		{
			NavigationService.NavigateToLogin(suppressRedirect: true);
		}
		else
		{
			_globalErrorMessage = "OTP does not match";
		}
	}

	private async Task ResentOtp()
	{
		await Mediator.Send(new CreateOtpCommand()
			{
				MobileNumber = Username!,
			});
	}

	public class ConfirmOtpModel
	{
		[Required]
		[RegularExpression(RegexExpConst.GeneralOtp, ErrorMessage = RegexExpConst.GeneralOtpMessage)]
		public string? OTP { get; set; }
	}
}
